import sys
import os

sys.path.append(os.path.abspath(".."))

from utils import libs_cpd

gaussian = libs_cpd.namedtuple('Gaussian', ['mean', 'var'])
gaussian.__repr__ = lambda s: 'ùí©(Œº={:.3f}, ùúé¬≤={:.3f})'.format(s[0], s[1])


def gaussian_multiply(g1, g2):
    mean = (g1.var * g2.mean + g2.var * g1.mean) / (g1.var + g2.var)
    variance = (g1.var * g2.var) / (g1.var + g2.var)
    return gaussian(mean, variance)


def update(prior, likelihood):
    posterior = gaussian_multiply(likelihood, prior)
    return posterior


def predict(pos, movement):
    return gaussian(pos.mean + movement.mean, pos.var + movement.var)


def online_detection(time_series=list(), window=20, queue_window=10, treshold_coef=3):
    ''' 
        An online implementation of Kalman Filter Change Point Detection based on risiduals,
    and current time-series statistics for treshold updating.
    
    Note:
        queue_window - min possible distance between two predicted CPs.
        treshold_coef - if residuals above this treshold than we can detect CP. Based on np.meean + 3*np.std
        where 3 is the coef.
        window - the length of data which we save in memory.
    '''

    dp = [0] * window  # –º–∞—Å—Å–∏–≤ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –ø–æ CPs
    queue_risiduals = [0] * window  # –æ—á–µ—Ä–µ–¥—å —Å —Ä—è–¥–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–±–∏–≤–∞—é—Ç —Ç—Ä–µ—à—Ö–æ–ª–¥
    queue_cp = [0] * queue_window  # –æ—á–µ—Ä–µ–¥—å CPs
    queue_ts = time_series[:window]  # —Ä
    queue_gaussian = [gaussian(libs_cpd.np.mean(queue_ts), libs_cpd.np.var(queue_ts))] * 2

    for i in range(window, len(time_series)):  # –≠—Ç–æ —Ü–∏–∫–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑ –≤ 9 —Å–µ–∫—É–Ω–¥ —É—Å–ª–æ–≤–Ω–æ.
        gaussian_likelihood = queue_gaussian[0]  # —Å–º–æ—Ç—Ä–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MEAN VAR
        gaussian_prior = gaussian(libs_cpd.np.mean(queue_ts),
                                  libs_cpd.np.var(queue_ts))  # —Å–º–æ—Ç—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MEAN VAR

        x = update(gaussian_prior, gaussian_likelihood)  # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ MEAN VAR
        queue_gaussian.pop(0)  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        queue_gaussian.append(gaussian_prior)  # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ likelihoo

        next_prediction = libs_cpd.np.random.normal(
            loc=x.mean)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞–Ω–∏—è –æ–± gaussian
        next_value = time_series[i]  # –ü
        risidual_value = abs(next_prediction - next_value)

        mean_risidual_prev = libs_cpd.np.mean(queue_risiduals)
        std_risidual_prev = libs_cpd.np.std(queue_risiduals)
        queue_risiduals.pop(0)  # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ risiduals
        queue_risiduals.append(risidual_value)  # –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ risiduals

        if risidual_value >= mean_risidual_prev + std_risidual_prev * treshold_coef:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥
            if max(queue_cp) != 1:  # queue filter IF
                queue_cp.pop(0)
                queue_cp.append(1)
                dp.append(1)
            else:  # queue filter else
                queue_cp.pop(0)
                queue_cp.append(0)
                dp.append(0)
        else:
            dp.append(0)
            queue_cp.pop(0)
            queue_cp.append(0)

        queue_ts.pop(0)  # —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ VALUE
        queue_ts.append(next_value)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ VALUE
    return dp
